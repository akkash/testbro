version: '3.8'

# TestBro.ai Complete Application Stack
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: testbro-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: testbro
      POSTGRES_USER: testbro
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-testbro_secure_password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - testbro-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testbro -d testbro"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: testbro-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-testbro_redis_password} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - testbro-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  # TestBro Backend API
  testbro-backend:
    build:
      context: ./testbro-backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: testbro-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      
      # Database Configuration
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-testbro_redis_password}
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-your_super_secure_jwt_secret_key_change_in_production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your_super_secure_refresh_secret_change_in_production}
      
      # OpenRouter AI Configuration
      OPENROUTER_KEY: ${OPENROUTER_KEY}
      
      # Email Configuration (optional)
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@testbro.ai}
      
      # APM Configuration (optional)
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      SENTRY_DSN: ${SENTRY_DSN}
      
      # Frontend URL for CORS
      FRONTEND_URL: http://localhost:3000
      
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    ports:
      - "3001:3001"
    networks:
      - testbro-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { hostname: 'localhost', port: 3001, path: '/health', timeout: 5000 }; const req = http.request(options, (res) => { if (res.statusCode === 200) process.exit(0); else process.exit(1); }); req.on('error', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # TestBro Frontend
  testbro-frontend:
    build:
      context: ./testbro-frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: http://localhost:3001
    container_name: testbro-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    networks:
      - testbro-network
    depends_on:
      testbro-backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Load Balancer (optional for production)
  nginx-lb:
    image: nginx:1.25-alpine
    container_name: testbro-nginx-lb
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - testbro-network
    depends_on:
      - testbro-frontend
      - testbro-backend
    profiles:
      - production
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: testbro-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - testbro-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: testbro-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3030:3000"
    networks:
      - testbro-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network for service communication
networks:
  testbro-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
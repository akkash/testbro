version: '3.8'

# Docker Compose Override for Production Environment
# Use with: docker-compose -f docker-compose.yml -f docker-compose.production.yml up

services:
  testbro-backend:
    image: ${DOCKER_REGISTRY:-ghcr.io/testbro-ai}/testbro-backend:${IMAGE_TAG:-latest}
    
    environment:
      NODE_ENV: production
      LOG_LEVEL: warn
      ENABLE_DEBUG_ROUTES: false
      ENABLE_API_DOCS: false
      
    # Production resource limits and scaling
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    
    # Production health checks (more frequent)
    healthcheck:
      interval: 15s
      timeout: 5s
      retries: 2
      start_period: 60s
    
    # Production security and monitoring labels
    labels:
      - "environment=production"
      - "service=backend"
      - "monitoring=enabled"
      - "alerting=critical"
      - "backup=enabled"

  testbro-frontend:
    image: ${DOCKER_REGISTRY:-ghcr.io/testbro-ai}/testbro-frontend:${IMAGE_TAG:-latest}
    
    # Production build configuration
    build:
      args:
        VITE_API_URL: https://api.testbro.ai
        VITE_ENVIRONMENT: production
        VITE_ENABLE_ANALYTICS: true
        VITE_ENABLE_DEBUG: false
        VITE_CDN_URL: https://cdn.testbro.ai
    
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    
    labels:
      - "environment=production"
      - "service=frontend"
      - "monitoring=enabled"

  postgres:
    environment:
      POSTGRES_DB: testbro_production
      POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements
      
    # Production PostgreSQL configuration
    command: >
      postgres -c max_connections=200
               -c shared_buffers=2GB
               -c effective_cache_size=6GB
               -c maintenance_work_mem=512MB
               -c checkpoint_completion_target=0.9
               -c wal_buffers=16MB
               -c default_statistics_target=100
               -c random_page_cost=1.1
               -c effective_io_concurrency=200
               -c work_mem=4MB
               -c min_wal_size=1GB
               -c max_wal_size=4GB
               -c max_worker_processes=8
               -c max_parallel_workers_per_gather=4
               -c max_parallel_workers=8
               -c max_parallel_maintenance_workers=4
    
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'
    
    # Production backup configuration
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./scripts/postgres-backup.sh:/usr/local/bin/backup.sh:ro

  redis:
    # Production Redis configuration
    command: >
      redis-server --appendonly yes
                   --maxmemory 2gb
                   --maxmemory-policy allkeys-lru
                   --save 900 1
                   --save 300 10
                   --save 60 10000
                   --tcp-keepalive 300
                   --tcp-backlog 511
                   --timeout 0
                   --databases 16
                   --hz 10
    
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Production Load Balancer
  nginx-lb:
    image: nginx:1.25-alpine
    container_name: testbro-nginx-production
    restart: unless-stopped
    
    volumes:
      - ./nginx/production/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/production/conf.d:/etc/nginx/conf.d:ro
      - ./ssl/production:/etc/ssl:ro
      - nginx_logs:/var/log/nginx
    
    ports:
      - "80:80"
      - "443:443"
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    networks:
      - testbro-network
    
    depends_on:
      - testbro-frontend
      - testbro-backend
    
    labels:
      - "environment=production"
      - "service=loadbalancer"
      - "monitoring=enabled"

  # Production Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: testbro-prometheus-production
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    
    volumes:
      - ./monitoring/prometheus-production.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts:/etc/prometheus/alerts:ro
      - prometheus_production_data:/prometheus
    
    ports:
      - "9090:9090"
    
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    
    networks:
      - testbro-network

  grafana:
    image: grafana/grafana:latest
    container_name: testbro-grafana-production
    restart: unless-stopped
    
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: redis-datasource,grafana-clock-panel,grafana-piechart-panel
      GF_SERVER_DOMAIN: grafana.testbro.ai
      GF_SERVER_ROOT_URL: https://grafana.testbro.ai
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_SNAPSHOTS_EXTERNAL_ENABLED: false
    
    volumes:
      - grafana_production_data:/var/lib/grafana
      - ./monitoring/grafana/production:/etc/grafana/provisioning
    
    ports:
      - "3030:3000"
    
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    
    networks:
      - testbro-network
    
    depends_on:
      - prometheus

  # Production Alertmanager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: testbro-alertmanager-production
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://alerts.testbro.ai'
    
    volumes:
      - ./monitoring/alertmanager-production.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    
    ports:
      - "9093:9093"
    
    networks:
      - testbro-network
    
    labels:
      - "environment=production"
      - "service=alerting"

  # Production Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: testbro-elasticsearch-production
    restart: unless-stopped
    
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=false
    
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    
    ports:
      - "9200:9200"
    
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    
    networks:
      - testbro-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: testbro-kibana-production
    restart: unless-stopped
    
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    
    ports:
      - "5601:5601"
    
    depends_on:
      - elasticsearch
    
    networks:
      - testbro-network

  # Production Backup Service
  backup-service:
    image: postgres:15-alpine
    container_name: testbro-backup-service
    restart: unless-stopped
    
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: testbro_production
      POSTGRES_USER: testbro
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET: ${BACKUP_S3_BUCKET}
    
    volumes:
      - ./scripts/backup-cron.sh:/usr/local/bin/backup-cron.sh:ro
      - backup_data:/backups
    
    command: >
      sh -c "
        apk add --no-cache aws-cli &&
        echo '0 2 * * * /usr/local/bin/backup-cron.sh' | crontab - &&
        crond -f
      "
    
    networks:
      - testbro-network
    
    depends_on:
      - postgres

volumes:
  postgres_backups:
    driver: local
  prometheus_production_data:
    driver: local
  grafana_production_data:
    driver: local
  alertmanager_data:
    driver: local
  elasticsearch_data:
    driver: local
  backup_data:
    driver: local
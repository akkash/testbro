#!/bin/bash

# Simple Deployment Script for Vercel + Render
# This script helps set up and deploy TestBro.ai to Vercel and Render

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
FRONTEND_DIR="$PROJECT_ROOT/testbro-frontend"
BACKEND_DIR="$PROJECT_ROOT/testbro-backend"

# Check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites..."
    
    # Check if Node.js is installed
    if ! command -v node >/dev/null 2>&1; then
        log_error "Node.js is not installed. Please install Node.js 18+ and try again."
        exit 1
    fi
    
    # Check Node.js version
    NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
    if [[ $NODE_VERSION -lt 18 ]]; then
        log_error "Node.js version 18+ is required. Current version: $(node --version)"
        exit 1
    fi
    
    # Check if npm is installed
    if ! command -v npm >/dev/null 2>&1; then
        log_error "npm is not installed. Please install npm and try again."
        exit 1
    fi
    
    log_success "Prerequisites check passed"
}

# Install Vercel CLI
install_vercel_cli() {
    if ! command -v vercel >/dev/null 2>&1; then
        log_info "Installing Vercel CLI..."
        npm install -g vercel
        log_success "Vercel CLI installed"
    else
        log_info "Vercel CLI is already installed"
    fi
}

# Prepare frontend for deployment
prepare_frontend() {
    log_info "Preparing frontend for Vercel deployment..."
    
    cd "$FRONTEND_DIR"
    
    # Install dependencies
    log_info "Installing frontend dependencies..."
    npm ci
    
    # Create production environment file
    if [[ ! -f ".env.production" ]]; then
        log_info "Creating production environment file..."
        cat > .env.production << EOF
VITE_API_URL=https://testbro-backend.onrender.com
VITE_ENVIRONMENT=production
VITE_ENABLE_ANALYTICS=true
VITE_ENABLE_DEBUG=false
EOF
        log_success "Frontend environment file created"
    else
        log_info "Frontend environment file already exists"
    fi
    
    # Test build
    log_info "Testing frontend build..."
    npm run build
    log_success "Frontend build test successful"
    
    cd "$PROJECT_ROOT"
}

# Prepare backend for deployment
prepare_backend() {
    log_info "Preparing backend for Render deployment..."
    
    cd "$BACKEND_DIR"
    
    # Install dependencies
    log_info "Installing backend dependencies..."
    npm ci
    
    # Test build
    log_info "Testing backend build..."
    npm run build
    log_success "Backend build test successful"
    
    # Create production environment template
    if [[ ! -f ".env.production.template" ]]; then
        log_info "Creating production environment template..."
        cat > .env.production.template << EOF
# Copy this file to .env in production and fill in the values
NODE_ENV=production
LOG_LEVEL=info
PORT=3001

# Set these in Render dashboard
SUPABASE_URL=your_supabase_url
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key
JWT_SECRET=your_jwt_secret
SESSION_SECRET=your_session_secret

# Auto-generated by Render
DATABASE_URL=auto_generated
REDIS_URL=auto_generated

# Frontend URL (update after Vercel deployment)
CORS_ORIGIN=https://your-app.vercel.app
EOF
        log_success "Backend environment template created"
    else
        log_info "Backend environment template already exists"
    fi
    
    cd "$PROJECT_ROOT"
}

# Deploy to Vercel
deploy_frontend() {
    log_info "Deploying frontend to Vercel..."
    
    cd "$FRONTEND_DIR"
    
    if command -v vercel >/dev/null 2>&1; then
        log_info "Starting Vercel deployment..."
        log_warning "You'll need to configure environment variables in Vercel dashboard"
        log_warning "Required variables: VITE_API_URL, VITE_ENVIRONMENT"
        
        # Deploy to Vercel
        vercel --prod
        log_success "Frontend deployed to Vercel!"
    else
        log_warning "Vercel CLI not available. Please deploy manually:"
        log_info "1. Go to https://vercel.com"
        log_info "2. Connect your GitHub repository"
        log_info "3. Set build command: npm run build"
        log_info "4. Set output directory: dist"
        log_info "5. Add environment variables"
    fi
    
    cd "$PROJECT_ROOT"
}

# Setup Render deployment
setup_render() {
    log_info "Setting up Render deployment..."
    
    log_info "Render deployment setup:"
    log_info "1. Go to https://render.com"
    log_info "2. Connect your GitHub repository"
    log_info "3. Create a new Web Service"
    log_info "4. Use these settings:"
    log_info "   - Build Command: npm ci && npm run build"
    log_info "   - Start Command: npm start"
    log_info "   - Node Version: 18"
    log_info "   - Root Directory: testbro-backend"
    log_info "5. Add environment variables from .env.production.template"
    log_info "6. Create PostgreSQL and Redis add-ons"
    
    log_warning "Don't forget to update CORS_ORIGIN with your Vercel URL!"
}

# Update CORS configuration
update_cors() {
    local vercel_url="$1"
    
    if [[ -n "$vercel_url" ]]; then
        log_info "Updating CORS configuration..."
        
        # Update backend CORS configuration
        local cors_config="$BACKEND_DIR/src/config/cors.ts"
        if [[ -f "$cors_config" ]]; then
            sed -i.bak "s|https://localhost:3000|$vercel_url|g" "$cors_config"
            log_success "CORS configuration updated"
        else
            log_warning "CORS configuration file not found"
        fi
    fi
}

# Run deployment tests
test_deployment() {
    log_info "Running deployment tests..."
    
    # Test frontend build
    cd "$FRONTEND_DIR"
    if npm run build >/dev/null 2>&1; then
        log_success "Frontend build test passed"
    else
        log_error "Frontend build test failed"
    fi
    
    # Test backend build
    cd "$BACKEND_DIR"
    if npm run build >/dev/null 2>&1; then
        log_success "Backend build test passed"
    else
        log_error "Backend build test failed"
    fi
    
    cd "$PROJECT_ROOT"
}

# Show deployment status
show_status() {
    log_info "Deployment Status:"
    echo "=================="
    
    echo "Frontend (Vercel):"
    if [[ -f "$FRONTEND_DIR/vercel.json" ]]; then
        echo "  ✅ Vercel configuration ready"
    else
        echo "  ❌ Vercel configuration missing"
    fi
    
    if [[ -f "$FRONTEND_DIR/.env.production" ]]; then
        echo "  ✅ Production environment configured"
    else
        echo "  ❌ Production environment not configured"
    fi
    
    echo ""
    echo "Backend (Render):"
    if [[ -f "$PROJECT_ROOT/render.yaml" ]]; then
        echo "  ✅ Render configuration ready"
    else
        echo "  ❌ Render configuration missing"
    fi
    
    if [[ -f "$BACKEND_DIR/.env.production.template" ]]; then
        echo "  ✅ Environment template created"
    else
        echo "  ❌ Environment template missing"
    fi
    
    echo ""
    echo "Next Steps:"
    echo "1. Deploy frontend to Vercel"
    echo "2. Deploy backend to Render"
    echo "3. Configure environment variables"
    echo "4. Test the deployment"
}

# Main deployment workflow
deploy_all() {
    log_info "Starting complete deployment workflow..."
    
    check_prerequisites
    install_vercel_cli
    prepare_frontend
    prepare_backend
    test_deployment
    
    log_success "Deployment preparation complete!"
    log_info "Ready to deploy to Vercel and Render"
    
    # Optional: Deploy frontend
    read -p "Deploy frontend to Vercel now? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        deploy_frontend
    fi
    
    setup_render
    show_status
}

# Show usage information
usage() {
    echo "Usage: $0 [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  deploy        Complete deployment workflow"
    echo "  prepare       Prepare both frontend and backend"
    echo "  frontend      Deploy frontend to Vercel"
    echo "  backend       Setup backend for Render"
    echo "  test          Run deployment tests"
    echo "  status        Show deployment status"
    echo "  help          Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 deploy     # Complete deployment workflow"
    echo "  $0 prepare    # Prepare for deployment"
    echo "  $0 frontend   # Deploy to Vercel only"
}

# Handle command line arguments
case "${1:-help}" in
    "deploy")
        deploy_all
        ;;
    "prepare")
        check_prerequisites
        prepare_frontend
        prepare_backend
        test_deployment
        log_success "Preparation complete!"
        ;;
    "frontend")
        check_prerequisites
        prepare_frontend
        deploy_frontend
        ;;
    "backend")
        check_prerequisites
        prepare_backend
        setup_render
        ;;
    "test")
        test_deployment
        ;;
    "status")
        show_status
        ;;
    "help"|*)
        usage
        ;;
esac